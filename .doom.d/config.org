#+TITLE: Doom Emacs Configuration
#+AUTHOR: YBenel (Younes Ben El)
#+subtitle: My Personal Doom Emacs Configuration
#+EMAIL: ybenel@pm.me
#+DATE: {{{modification-time(%Y-%m-%d, t)}}} at {{{modification-time(%H:%M, t)}}}
#+startup: fold hideblocks
#+LaTeX_CLASS: article
#+SETUPFILE: ~/org/Templates/latex.setup
#+latex_engraved_theme: doom-moonlight
#+OPTIONS: toc:t

* Basic Startup
Set lexical binding to make this file run faster
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
** Load Personal File
Load this personal file that contains sensitive information
use epa-file to decrypt our *GPG* encrypt personal.el then load it.
#+begin_src emacs-lisp
(let* ((personal-file (concat doom-private-dir "personal.el.gpg")))
  (unless (file-exists-p! personal-file)
    (epa-file-enable)))
(load (concat doom-private-dir "personal.el"))
(setq auth-sources '("~/.authinfo.gpg"))
(setq inhibit-automatic-native-compilation t
      native-comp-async-report-warnings-errors 'silent)
#+end_src
** Visuals
*** Set Doom Font
I'm using [[github:eliheuer/caskaydia-cove][Caskaydia Cove]] which is a fork of [[github:microsoft/cascadia-code][Cascadia Code]]
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "VictorMono Nerd Font" :weight 'Regular :foreground "#00bfff" :size 15)
      doom-variable-pitch-font (font-spec :family "Cascadia Code" :weight 'SemiLight :size 15)
      ;; doom-variable-pitch-font (font-spec :family "JetBrains Mono" :weight 'Medium :size 15)
      doom-unicode-font (font-spec :family "JuliaMono")
      doom-big-font (font-spec :family "Cascadia Code" :weight 'SemiBold :size 24)
      doom-serif-font (font-spec :family "IBM Plex Mono" :size 22 :weight 'light))

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src
*** Set Doom Theme
Doom-themes are fantastic, there's alot of variants you could choose from.
Right here I'm using doom-dracula , there's also [[github:dracula/emacs][Dracula]] theme which is little more bold
#+begin_src emacs-lisp
;; (add-to-list 'custom-theme-load-path "~/.doom.d/themes")
;; (use-package! mindre-theme
;;     :ensure t
;;     :custom
;;     (mindre-use-more-bold nil)
;;     (mindre-use-faded-lisp-parens t))

(use-package! doom-themes
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-moonlight t) ;; set laserwave theme
  (doom-themes-visual-bell-config)   ;; Enable flashing mode-line on errors
  (doom-themes-neotree-config)   ;; Enable custom neotree theme
  (doom-themes-org-config))  ;; Corrects (and improves) org-mode's native fontification.


;; (add-to-list 'custom-theme-load-path "~/.doom.d/lisp/themes")
;; (load-theme 'chocolate t)

;; (when (window-system 'nil) (progn (load-theme 'dracula t)) (load-theme 'doom-moonlight 't))
#+end_src
However, by default ~red~ text is used in the ~modeline~, so let's make that orange
so I don't feel like something's gone /wrong/ when editing files.

#+begin_src emacs-lisp
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "orange"))
#+end_src

While we're modifying the modeline, =LF UTF-8= is the default file encoding, and
thus not worth noting in the modeline. So, let's conditionally hide it.

#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
                                 '(coding-category-undecided coding-category-utf-8))
                           (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
                t)))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src

*** Splash Dashboard
What's more fun than adding emacs logo in splash screen of doom dashboard.
There's also a tool called [[github:folke/splashcii][Splashcii]] that downloads ascii arts and place it in our doom-dashboard
+ Removing Doom Dashboard and using [[https://github.com/emacs-dashboard/emacs-dashboard][Emacs Dashboard]] meanly because its extensable.
#+begin_src emacs-lisp
(setq doom-fallback-buffer-name "👽 Doom"
      +doom-dashboard-name "👽 Doom"
      +workspaces-main "👽 Doom")
;; (use-package! dashboard
;;  :init
;;  (setq dashboard-set-heading-icons t)
;;  (setq dashboard-set-file-icons t)
;;  (setq dashboard-banner-logo-title "The God Above All")
;;  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
;;  (setq dashboard-startup-banner "~/.doom.d/img/doom-emacs.png")
;;  (setq dashboard-center-content nil) ;; set to 't' for centered content
;;  (setq dashboard-items '((recents . 5)
;;                          (agenda . 5 )
;;                          (bookmarks . 5)
;;                          (registers . 5)))
;;  :config
;;  (dashboard-setup-startup-hook)
;;  (dashboard-modify-heading-icons '((recents . "file-text")
;;                                    (bookmarks . "book"))))
;; ;;Set default fallback buffer
;; (setq doom-fallback-buffer "*dashboard*")
;; (setq doom-fallback-buffer-name "*dashboard*")
;; (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
;; Splash screen for doom dashboard
;; (setq fancy-splash-image "~/.doom.d/img/doom-emacs.png")
(setq fancy-splash-image "~/.doom.d/img/alien_300.png")

;; (defvar fancy-splash-image-template
;;   ;; "~/.doom.d/img/doom-emacs.svg"
;;   (expand-file-name "misc/splash-images/emacs-e-template.svg" doom-private-dir)
;;   ;; (expand-file-name "img/doom-emacs.svg" doom-private-dir)
;;   "Default template svg used for the splash image, with substitutions from ")

;; (defvar fancy-splash-sizes
;;   `((:height 300 :min-height 50 :padding (0 . 2))
;;     (:height 250 :min-height 42 :padding (2 . 4))
;;     (:height 200 :min-height 35 :padding (3 . 3))
;;     (:height 150 :min-height 28 :padding (3 . 3))
;;     (:height 100 :min-height 20 :padding (2 . 2))
;;     (:height 75  :min-height 15 :padding (2 . 1))
;;     (:height 50  :min-height 10 :padding (1 . 0))
;;     (:height 1   :min-height 0  :padding (0 . 0)))
;;   "list of plists with the following properties
;;   :height the height of the image
;;   :min-height minimum `frame-height' for image
;;   :padding `+doom-dashboard-banner-padding' (top . bottom) to apply
;;   :template non-default template file
;;   :file file to use instead of template")

;; (defvar fancy-splash-template-colours
;;   '(("$colour1" . keywords) ("$colour2" . type) ("$colour3" . base5) ("$colour4" . base8))
;;   "list of colour-replacement alists of the form (\"$placeholder\" . 'theme-colour) which applied the template")

;; (unless (file-exists-p (expand-file-name "theme-splashes" doom-cache-dir))
;;   (make-directory (expand-file-name "theme-splashes" doom-cache-dir) t))

;; (defun fancy-splash-filename (theme-name height)
;;   (expand-file-name (concat (file-name-as-directory "theme-splashes")
;;                             theme-name
;;                             "-" (number-to-string height) ".svg")
;;                     doom-cache-dir))

;; (defun fancy-splash-clear-cache ()
;;   "Delete all cached fancy splash images"
;;   (interactive)
;;   (delete-directory (expand-file-name "theme-splashes" doom-cache-dir) t)
;;   (message "Cache cleared!"))

;; (defun fancy-splash-generate-image (template height)
;;   "Read TEMPLATE and create an image if HEIGHT with colour substitutions as
;;    described by `fancy-splash-template-colours' for the current theme"
;;   (with-temp-buffer
;;     (insert-file-contents template)
;;     (re-search-forward "$height" nil t)
;;     (replace-match (number-to-string height) nil nil)
;;     (dolist (substitution fancy-splash-template-colours)
;;       (goto-char (point-min))
;;       (while (re-search-forward (car substitution) nil t)
;;         (replace-match (doom-color (cdr substitution)) nil nil)))
;;     (write-region nil nil
;;                   (fancy-splash-filename (symbol-name doom-theme) height) nil nil)))

;; (defun fancy-splash-generate-images ()
;;   "Perform `fancy-splash-generate-image' in bulk"
;;   (dolist (size fancy-splash-sizes)
;;     (unless (plist-get size :file)
;;       (fancy-splash-generate-image (or (plist-get size :template)
;;                                        fancy-splash-image-template)
;;                                    (plist-get size :height)))))

;; (defun ensure-theme-splash-images-exist (&optional height)
;;   (unless (file-exists-p (fancy-splash-filename
;;                           (symbol-name doom-theme)
;;                           (or height
;;                               (plist-get (car fancy-splash-sizes) :height))))
;;     (fancy-splash-generate-images)))

;; (defun get-appropriate-splash ()
;;   (let ((height (frame-height)))
;;     (cl-some (lambda (size) (when (>= height (plist-get size :min-height)) size))
;;              fancy-splash-sizes)))

;; (setq fancy-splash-last-size nil)
;; (setq fancy-splash-last-theme nil)
;; (defun set-appropriate-splash (&rest _)
;;   (let ((appropriate-image (get-appropriate-splash)))
;;     (unless (and (equal appropriate-image fancy-splash-last-size)
;;                  (equal doom-theme fancy-splash-last-theme)))
;;     (unless (plist-get appropriate-image :file)
;;       (ensure-theme-splash-images-exist (plist-get appropriate-image :height)))
;;     (setq fancy-splash-image
;;           (or (plist-get appropriate-image :file)
;;               (fancy-splash-filename (symbol-name doom-theme) (plist-get appropriate-image :height))))
;;     (setq +doom-dashboard-banner-padding (plist-get appropriate-image :padding))
;;     (setq fancy-splash-last-size appropriate-image)
;;     (setq fancy-splash-last-theme doom-theme)
;;     (+doom-dashboard-reload)))

;; (add-hook 'window-size-change-functions #'set-appropriate-splash)
;; (add-hook 'doom-load-theme-hook #'set-appropriate-splash)
(defvar splash-phrase-source-folder
  (expand-file-name "misc/splash-phrases" doom-private-dir)
  "A folder of text files with a fun phrase on each line.")

(defvar splash-phrase-sources
  (let* ((files (directory-files splash-phrase-source-folder nil "\\.txt\\'"))
         (sets (delete-dups (mapcar
                             (lambda (file)
                               (replace-regexp-in-string "\\(?:-[0-9]+-\\w+\\)?\\.txt" "" file))
                             files))))
    (mapcar (lambda (sset)
              (cons sset
                    (delq nil (mapcar
                               (lambda (file)
                                 (when (string-match-p (regexp-quote sset) file)
                                   file))
                               files))))
            sets))
  "A list of cons giving the phrase set name, and a list of files which contain phrase components.")

(defvar splash-phrase-set
  (nth (random (length splash-phrase-sources)) (mapcar #'car splash-phrase-sources))
  "The default phrase set. See `splash-phrase-sources'.")

(defun splase-phrase-set-random-set ()
  "Set a new random splash phrase set."
  (interactive)
  (setq splash-phrase-set
        (nth (random (1- (length splash-phrase-sources)))
             (cl-set-difference (mapcar #'car splash-phrase-sources) (list splash-phrase-set))))
  (+doom-dashboard-reload t))

(defvar splase-phrase--cache nil)

(defun splash-phrase-get-from-file (file)
  "Fetch a random line from FILE."
  (let ((lines (or (cdr (assoc file splase-phrase--cache))
                   (cdar (push (cons file
                                     (with-temp-buffer
                                       (insert-file-contents (expand-file-name file splash-phrase-source-folder))
                                       (split-string (string-trim (buffer-string)) "\n")))
                               splase-phrase--cache)))))
    (nth (random (length lines)) lines)))

(defun splash-phrase (&optional set)
  "Construct a splash phrase from SET. See `splash-phrase-sources'."
  (mapconcat
   #'splash-phrase-get-from-file
   (cdr (assoc (or set splash-phrase-set) splash-phrase-sources))
   " "))

(defun doom-dashboard-phrase ()
  "Get a splash phrase, flow it over multiple lines as needed, and make fontify it."
  (mapconcat
   (lambda (line)
     (+doom-dashboard--center
      +doom-dashboard--width
      (with-temp-buffer
        (insert-text-button
         line
         'action
         (lambda (_) (+doom-dashboard-reload t))
         'face 'doom-dashboard-menu-title
         'mouse-face 'doom-dashboard-menu-title
         'help-echo "Random phrase"
         'follow-link t)
        (buffer-string))))
   (split-string
    (with-temp-buffer
      (insert (splash-phrase))
      (setq fill-column (min 70 (/ (* 2 (window-width)) 3)))
      (fill-region (point-min) (point-max))
      (buffer-string))
    "\n")
   "\n"))

(defadvice! doom-dashboard-widget-loaded-with-phrase ()
  :override #'doom-dashboard-widget-loaded
  (setq line-spacing 0.2)
  (insert
   "\n\n"
   (propertize
    (+doom-dashboard--center
     +doom-dashboard--width
     (doom-display-benchmark-h 'return))
    'face 'doom-dashboard-loaded)
   "\n"
   (doom-dashboard-phrase)
   "\n"))

(defadvice! doom-dashboard-new-footer ()
  :override #'doom-dashboard-widget-footer
  (insert
   "\n"
   (+doom-dashboard--center
    (- +doom-dashboard--width 2)
    (with-temp-buffer
      (insert-text-button "👽"
                          'action (lambda (_) (browse-url "https://ybenel.cf/alien"))
                          'face 'doom-dashboard-footer-icon
                          'follow-link t
                          'help-echo "Click Me Homan!")
      (buffer-string)))
   "\n"))

(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(add-hook! '+doom-dashboard-mode-hook (hide-mode-line-mode 1) (hl-line-mode -1))
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))

;; Call splashcii to get the banne and output it .
;; (defvar +fl/splashcii-query ""
;;   "The query to search on asciiur.com")
;; (defun +fl/splashcii-banner ()
;;   (mapc (lambda (line)
;;           (insert (propertize (+doom-dashboard--center +doom-dashboard--width line)
;;                               'face 'doom-dashboard-banner) " ")
;;           (insert "\n"))
;;         (split-string (with-output-to-string
;;                         (call-process "splashcii" nil standard-output nil +fl/splashcii-query))
;;                       "\n" t)))
;; (setq +doom-dashboard-ascii-banner-fn #'+fl/splashcii-banner)
;; (setq +fl/splashcii-query "batman")
#+end_src
*** Background for non-real buffer
Using Solaire-mode to add the dark background in unreal buffers
#+begin_src emacs-lisp
(solaire-global-mode +1)
#+end_src
*** Window title
I'd like to have just the buffer name, then if applicable the project folder
#+begin_src emacs-lisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "☰ "
              (subst-char-in-string ?_ ?  buffer-file-name))
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ◉ %s" "  ●  %s") project-name))))))
#+end_src

For example when I open my config file it the window will be titled =config.org ●
doom= then as soon as I make a change it will become =config.org ◉ doom=.
*** Display Line Numbers
Setting style of line numbers in effect, there's options (nil,t,visual,relative)
I'm using the absolute line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src
*** Set Frame Transparency
Enabling Frame Transparency For Focused And Unfocused Frames
#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(95 . 80))
(add-to-list 'default-frame-alist '(alpha . (95 . 80)))

(defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
    nil 'alpha
    (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
        '(85 . 50) '(100 . 100)))))
#+end_src
*** Marginalia
#+begin_quote
Part of the =:completion vertico= module.
#+end_quote

Marginalia is nice, but the file metadata annotations are a little too plain.
Specifically, I have these gripes
+ File attributes would be nicer if colored
+ I don't care about the user/group information if the user/group is me
+ When a file time is recent, a relative age (e.g. =2h ago=) is more useful than
  the date
+ An indication of file fatness would be nice

Thanks to the ~marginalia-annotator-registry~, we don't have to advise, we can
just add a new =file= annotator.

Another small thing is the face used for docstrings. At the moment it's =(italic
shadow)=, but I don't like that.

#+begin_src emacs-lisp
(require 'marginalia)
(after! marginalia
  (setq marginalia-censor-variables nil)

  (defadvice! +marginalia--anotate-local-file-colorful (cand)
    "Just a more colourful version of `marginalia--anotate-local-file'."
    :override #'marginalia--annotate-local-file
    (when-let (attrs (file-attributes (substitute-in-file-name
                                       (marginalia--full-candidate cand))
                                      'integer))
      (marginalia--fields
       ((marginalia--file-owner attrs)
        :width 12 :face 'marginalia-file-owner)
       ((marginalia--file-modes attrs))
       ((+marginalia-file-size-colorful (file-attribute-size attrs))
        :width 7)
       ((+marginalia--time-colorful (file-attribute-modification-time attrs))
        :width 12))))

  (defun +marginalia--time-colorful (time)
    (let* ((seconds (float-time (time-subtract (current-time) time)))
           (color (doom-blend
                   (face-attribute 'marginalia-date :foreground nil t)
                   (face-attribute 'marginalia-documentation :foreground nil t)
                   (/ 1.0 (log (+ 3 (/ (+ 1 seconds) 345600.0)))))))
      ;; 1 - log(3 + 1/(days + 1)) % grey
      (propertize (marginalia--time time) 'face (list :foreground color))))

  (defun +marginalia-file-size-colorful (size)
    (let* ((size-index (/ (log10 (+ 1 size)) 7.0))
           (color (if (< size-index 10000000) ; 10m
                      (doom-blend 'orange 'green size-index)
                    (doom-blend 'red 'orange (- size-index 1)))))
      (propertize (file-size-human-readable size) 'face (list :foreground color)))))
#+end_src
*** Beacon
Setting up beacon to highlight cursor
#+begin_src emacs-lisp
(beacon-mode 1)
#+end_src
*** Window Zoom
#+begin_src emacs-lisp
(with-eval-after-load "persp-mode-autoloads"
  (add-hook 'after-init-hook #'(lambda () (persp-mode 1))))

(require 'zoom-window)
(custom-set-variables
 '(zoom-window-use-persp t)
 '(zoom-window-mode-line-color "MediumPurple4"))
(zoom-window-setup)
#+end_src
** Editing
*** Aggressive Indent
Indent blocks very useful then editing lisp code,also other stuff
#+begin_src emacs-lisp
(use-package! aggressive-indent
  :init
  (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode))
#+end_src
*** Highlight Indent Guides
This packages highlights indent guides, which is really useful when writing code.
#+begin_src emacs-lisp
(use-package! highlight-indent-guides
  :init
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  (setq highlight-indent-guides-method 'character
        highlight-indent-guides-delay 0
        highlight-indent-guides-responsive 'stack
        highlight-indent-guides-auto-enabled nil))
#+end_src
*** Auto Complete & FlySpell
Using the built-in flyspell in emacs, fantastic.
#+begin_src emacs-lisp :tangle no
(require 'flyspell)
#+end_src
Setting a custom dictionary to auto complete
#+begin_src emacs-lisp
(when (require 'auto-complete-config nil 'noerror)
  (ac-config-default)
  (add-to-list 'ac-dictionary-files "~/.doom.d/misc/english-words.txt")
  (setq-default ac-sources '(ac-source-dictionary ac-source-words-in-same-mode-buffers))
  (dolist (mode '(org-mode LaTeX-mode markdown-mode text-mode fundamental-mode))
    (add-to-list 'ac-modes mode))
  ;; Adding Keymap to lunch or stop auto-complete
  (define-key ac-mode-map (kbd "M-[") 'auto-complete)
  (define-key ac-completing-map (kbd "M-]") 'ac-stop)
  ;; Changing default color
  (custom-set-faces! '(ac-selection-face :slant italic  :foreground "black" :background "LightCoral")))
#+end_src
Setting thesaurus api key
#+begin_src emacs-lisp
(setq mw-thesaurus--api-key "----APIKEY---")
(add-hook 'mw-thesaurus-mode-hook #'(lambda () (define-key evil-normal-state-local-map (kbd "q") 'mw-thesaurus--quit)))
#+end_src
*** Tab Width
Set Spaces Instead of tabs for more consistency
#+begin_src emacs-lisp
(setq-default tab-width 2)
(setq default-tab-width 2)
#+end_src
*** Minimap
Sublimity Packages is another cool one that gives us minimap similar to whats like in sublime
#+begin_src emacs-lisp
(require 'sublimity)
;; ;; Smooth  Scroll (Not Really Prefer The Builtin Feel feel to try it tho)
;; (use-package sublimity-scroll
;;   :config
;;   (setq sublimity-scroll-weight 5
;;         sublimity-scroll-vertical-frame-delay 0.01
;;         sublimity-scroll-drift-length 15))

;; Minimap
(use-package! sublimity-map
  :config
  (sublimity-map-set-delay 3)
  (setq sublimity-map-size 20)
  (setq sublimity-map-fraction 0.9)
  (setq sublimity-map-text-scale -9))
#+end_src
*** Lua Mode
Enable Lua-mode
#+begin_src emacs-lisp
(require 'lua-mode)
#+end_src
*** Consult-dir
Select Recent Viewed Dir Or Bookmark,Projects..
#+begin_src emacs-lisp
(use-package! consult-dir
  :bind (("C-x C-d" . consult-dir)
         :map minibuffer-local-completion-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))
#+end_src
*** Undo-Redo
Do Not Delete The Whole Block Instead steps are determined according to Emacs heuristics
Adding other cool stuff
#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      truncate-string-ellipsis "…"                ; Unicode ellispis are nicer than "...", and also save /precious/ space
      password-cache-expiry nil                   ; I can trust my computers ... can't I?
      ;; scroll-preserve-screen-position 'always     ; Don't have `point' jump around
      scroll-margin 2)                            ; It's nice to maintain a little margin

(display-time-mode 1)                             ; Enable time in the mode-line

;;(unless (string-match-p "^Power N/A" (battery))   ; On laptops...
;;  (display-battery-mode 1))                       ; it's nice to know how much power you have

(global-subword-mode 1)                           ; Iterate through CamelCase words
#+end_src
*** Remove history dups
#+begin_src emacs-lisp
(setq history-delete-duplicates t)
#+end_src
*** Recentf
Recentf package doesn't seem to be saving every file due to not setting configuration properly by doom emacs
#+begin_src emacs-lisp
(setq recentf-auto-cleanup 'never
      recentf-max-menu-items 50
      recentf-max-saved-items 400)
(add-hook 'find-file-hook 'recentf-save-list)
#+end_src
*** Python Mode
Using [[https://github.com/palantir/python-language-server][Pyls]] Rather Than The Default Mspyls because it had issues in doom emacs.
Setting up lsp-mode and other functionalities for better features.
+ Before Continuing Please Install Pyl
#+begin_src sh :tangle no
pip install --user "python-language-server[all]"
#+end_src
#+begin_src emacs-lisp :tangle no
(use-package! python-mode
  :ensure t
  :hook (python-mode . lsp-deferred)
  :config
  (set-ligatures! 'python-mode
    ;; Functional
    :def "def"
    :lambda "lambda"
    ;; Types
    :null "None"
    :true "True" :false "False"
    :int "int" :str "str"
    :float "float"
    :bool "bool"
    :tuple "tuple"
    ;; Flow
    :not "not"
    :in "in" :not-in "not in"
    :and "and" :or "or"
    :for "for"
    :return "return" :yield "yield")

  (setq python-indent-guess-indent-offset-verbose nil)

  ;; Default to Python 3. Prefer the versioned Python binaries since some
  ;; systems stupidly make the unversioned one point at Python 2.
  (when (and (executable-find "python3")
             (string= python-shell-interpreter "python"))
    (setq python-shell-interpreter "python3"))

  (add-hook! 'python-mode-hook
    (defun +python-use-correct-flycheck-executables-h ()
      "Use the correct Python executables for Flycheck."
      (let ((executable python-shell-interpreter))
        (save-excursion
          (goto-char (point-min))
          (save-match-data
            (when (or (looking-at "#!/usr/bin/env \\(python[^ \n]+\\)")
                      (looking-at "#!\\([^ \n]+/python[^ \n]+\\)"))
              (setq executable (substring-no-properties (match-string 1))))))
        ;; Try to compile using the appropriate version of Python for
        ;; the file.
        (setq-local flycheck-python-pycompile-executable executable)
        ;; We might be running inside a virtualenv, in which case the
        ;; modules won't be available. But calling the executables
        ;; directly will work.
        (setq-local flycheck-python-pylint-executable "pylint")
        (setq-local flycheck-python-flake8-executable "flake8"))))

  (define-key python-mode-map (kbd "DEL") nil) ; interferes with smartparens
  (sp-local-pair 'python-mode "'" nil
                 :unless '(sp-point-before-word-p
                           sp-point-after-word-p
                           sp-point-before-same-p))

  ;; Affects pyenv and conda
  (when (featurep! :ui modeline)
    (advice-add #'pythonic-activate :after-while #'+modeline-update-env-in-all-windows-h)
    (advice-add #'pythonic-deactivate :after #'+modeline-clear-env-in-all-windows-h))

  (setq-hook! 'python-mode-hook tab-width python-indent-offset))
;; Set Path To pylsp and pyls otherwise it doesn't work
(setq lsp-pyls-server-command "/home/ybenel/.local/bin/pyls")
(setq lsp-pylsp-server-command "/home/ybenel/.local/bin/pylsp")
;; Set Flake8 Ignore Codes
(setq lsp-pylsp-plugins-flake8-ignore ["E231","E226","F401"])

(use-package! poetry
  :after python-mode
  :init
  (setq poetry-tracking-strategy 'switch-buffer)
  (add-hook 'python-mode-hook #'poetry-tracking-mode))
#+end_src
+ Set indentation for python (i like to 2 spaces)
#+begin_src emacs-lisp
(setq python-indent-offset 2)
#+end_src
*** Column Force
Using [[https://github.com/jordonbiondo/column-enforce-mode][column-enforce-mode]] to force a certain column width
#+begin_src emacs-lisp
(setq column-enforce-column 90)
#+end_src
*** Rainbow Delimeters
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'(lambda () (rainbow-delimiters-mode)))
#+end_src
*** Eldoc Box
Enabling Eldoc-Box In all minor programming mode
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'(lambda () (eldoc-box-hover-at-point-mode) (eldoc-box-hover-mode)))
#+end_src
*** History Files
So when i do backups, i generally don't wanna backup my whole emacs.d directory,
because it can take a lot of space, and most of saved files are not generally important, Except for history files.
So instead i'm saving them in my =.doom.d= directory, that i can peacefully backup.
#+begin_src emacs-lisp
(setq savehist-file (concat doom-private-dir ".cache/savehist")
      recentf-save-file (concat doom-private-dir ".cache/recentf")
      save-place-file (concat doom-private-dir ".cache/saveplace")
      projectile-known-projects-file (concat doom-private-dir ".cache/projectile.projects")
      projectile-cache-file (concat doom-private-dir ".cache/projectile.cache"))
#+end_src
*** Resize Windows
I've been struggling to resize windows manually in Emacs.
But Thanks to a reddit post, a new package exists for it and it does what i need.
#+begin_src emacs-lisp
(require 'softresize)
(global-set-key (kbd "M-C-.") 'softresize-enlarge-window)
(global-set-key (kbd "M-C-,") 'softresize-reduce-window)
(global-set-key (kbd "M-C-[") 'softresize-enlarge-window-horizontally)
(global-set-key (kbd "M-C-]") 'softresize-reduce-window-horizontally)
#+end_src
*** LSP
Setting Custom Lsp Settings To Enable Certain Features
+ Enabling the headerline
+ Enabling signature and documentation
#+begin_src emacs-lisp
(setq lsp-headerline-breadcrumb-enable t
      lsp-signature-render-documentation t
      lsp-signature-auto-activate t)
#+end_src
*** Browse Directory
#+begin_src emacs-lisp :tangle no
(defun yb/search-folder ()
  ;; "~/.dotfiles" "~/.config" "~/Pictures" "~/Documents" "~/Downloads" "~/Templates" "~/Projects" "~/Public"
  (interactive
   (list
    (completing-read "Browse Directory: " (let ((directory-root (list "~/.dotfiles" "~/.config" "~/Pictures" "~/Documents" "~/Downloads" "~/Templates" "~/Projects" "~/Public")))))))
  (doom-project-browse directory-root))
#+end_src
** Tabs/Modeline
Using centaur-tabs to adds tabs in to our emacs with customizations
#+begin_src emacs-lisp
(use-package! centaur-tabs
  :hook (doom-first-file . centaur-tabs-mode)
  :bind
  ("C-1" . centaur-tabs-backward)
  ("C-2" . centaur-tabs-forward)
  ("C-3" . centaur-tabs-forward-group)
  ("C-4" . centaur-tabs-backward-group)
  ("C-0" . centaur-tabs-local-mode)
  :config
  (setq centaur-tabs-set-icons t
    centaur-tabs-gray-out-icons 'buffer
    centaur-tabs-set-bar 'over
    centaur-tabs-set-modified-marker t
    centaur-tabs-close-button "❌"
    centaur-tabs-modified-marker "👾"
    centaur-tabs-cycle-scope 'tabs)
  (centaur-tabs-change-fonts "VictorMono Nerd Font" 100)
  (add-hook! '(dashboard-mode-hook  +popup-buffer-mode-hook)
    (defun +tabs-disable-centaur-tabs-mode-maybe-h ()
      "Disable `centaur-tabs-mode' in current buffer."
      (when (centaur-tabs-mode-on-p)
        (centaur-tabs-local-mode)))))

(setq doom-modeline-major-mode-icon t)
(custom-set-faces! '(mode-line :slant italic))
(setq doom-modeline-height 23)
#+end_src
** Key Mapping
there's alot of ways to map keys in emacs, we use ~map!~ in doom emacs to make new keys
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("c". "code")
       :desc "Comment Line(s)" "[" #'comment-region
       :desc "Uncomment Line(s)" "]" #'uncomment-region))

(map! :leader
      (:prefix ("b". "buffer")
       :desc "List bookmarks" "L" #'list-bookmarks
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save))

(map! :leader
      (:prefix-map ("d" . "Doom")
       :desc "Doom Dashboard" "d" #'+doom-dashboard/open
       :desc "Hide Doom Modeline" "b" #'hide-mode-line-mode
       :desc "Bufler Switch Buffer" "e" #'bufler-switch-buffer
       :desc "Bufler Set Workspace Frame" "q" #'bufler-workspace-frame-set
       :desc "Counel Switch Buffer" "w" #'consult-buffer
       :desc "Window Zoom/Unzoom" "z" #'zoom-window-zoom
       :desc "Toggle Transparency" "o" #'toggle-transparency))

(map! :leader
      :desc "Switch To Left Window" "<left>" #'evil-window-left
      :desc "Switch To Right Window" "<right>" #'evil-window-right
      :desc "Switch To Up Window" "<up>"     #'evil-window-up
      :desc "Switch To Down Window" "<down>" #'evil-window-down
      :desc "Move Window Left" "C-<left>"    #'+evil/window-move-left
      :desc "Move Window Down" "C-<down>"    #'+evil/window-move-down
      :desc "Move Window Up" "C-<up>"        #'+evil/window-move-up
      :desc "Move Window Right" "C-<right>"  #'+evil/window-move-right)

(map! :leader
      (:prefix ("e". "evaluate/EWW")
       :desc "Evaluate elisp in buffer" "b" #'eval-buffer
       :desc "Evaluate defun" "d" #'eval-defun
       :desc "Evaluate elisp expression" "e" #'eval-expression
       :desc "Evaluate last sexpression" "l" #'eval-last-sexp
       :desc "Evaluate elis qqp in region" "r" #'eval-region
       :desc "Open Imenu" "t" #'lsp-ui-imenu
       :desc "Open Imenu" "c" #'consult-imenu))

(map! :map +doom-dashboard-mode-map
      :ne "f" #'find-file
      :ne "r" #'recentf-open-files
      :ne "p" #'doom/open-private-config
      :ne "c" (cmd! (find-file (expand-file-name "config.org" doom-private-dir)))
      :ne "." (cmd! (doom-project-find-file "~/.dotfiles/")) ; . for dotfiles
      :ne "n" #'my/org-roam-find-project
      :ne "d" #'org-roam-dailies-capture-today
      :ne "b" #'+vertico/switch-workspace-buffer
      :ne "B" #'consult-buffer
      :ne "q" #'save-buffers-kill-terminal)

(map! :leader
      (:prefix-map ("d" . "Doom")
       :desc "Eldoc (Eglot) help at point" "f" #'eldoc-box-eglot-help-at-point
       :desc "Eldoc Box help at point" "v" #'eldoc-box-help-at-point
       :desc "Lsp doc Unfocus Frame" ";" #'lsp-ui-doc-unfocus-frame
       :desc "Lsp doc Focus Frame" "'" #'lsp-ui-doc-focus-frame
       :desc "Lsp Doc Info Hide" "/" #'lsp-ui-doc-hide
       :desc "Lsp doc info toggle" "\\" #'lsp-ui-doc-glance
       :desc "Lsp Signature Active" "." #'lsp-signature-activate))

(map! :leader
      (:prefix-map ("d" . "Doom")
       :desc "Chronos timer set" "t" #'chronos-add-timer
       :desc "Org Sidebar Tree Toggle" "p" #'org-sidebar-tree-toggle
       :desc "Org Sidebar Toggle" "l" #'org-sidebar-toggle))

(map! :leader
      (:prefix-map ("c" . "code")
       (:prefix ("m". "Mixed Pitch")
        :desc "Mixed Pitched Mode" "m" #'mixed-pitch-mode
        :desc "Mixed Pitched Serif" "s" #'mixed-pitch-serif-mode)))

(map! :leader
      (:prefix-map ("d" . "Doom")
       (:prefix ("s". "spell")
        :desc "Run Spell Check On Region" "r" #'flyspell-region
        :desc "Correct Next Word" "n" #'flyspell-correct-next
        :desc "Correct Previous Word" "p" #'flyspell-correct-previous
        :desc "The Saurus Look Up" "s" #'mw-thesaurus-lookup-at-point
        :desc "The Saurus Look Up Word" "w" #'mw-thesaurus-lookup-dwim
        :desc "The Saurus Look Up Region" "d" #'mw-thesaurus-lookup)))
#+end_src
** Org
*** Set Org Directory
Setting custom org directory and enabling org logging, so each time a task is finishing it sets a date.
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-directory "~/org/")
  (setq org-log-done 'time)
  (setq org-agenda-include-diary t)

  ;; https://emacs.stackexchange.com/questions/31683/schedule-org-task-for-last-day-of-every-month
  (defun diary-last-day-of-month (date)
  "Return `t` if DATE is the last day of the month."
    (let* ((day (calendar-extract-day date))
          (month (calendar-extract-month date))
          (year (calendar-extract-year date))
          (last-day-of-month
              (calendar-last-day-of-month month year)))
      (= day last-day-of-month)))
#+end_src
*** Org Agenda
What's more better than organizing your life with org *super* agenda.
#+begin_src emacs-lisp
  (load-file (concat doom-private-dir "/lisp/agendas.el"))
#+end_src
*** Key Mapp
Set Shortcuts To Open Agenda,Todo,Notes.
#+begin_src emacs-lisp
  (map! :leader
        (:prefix ("-" . "Open File")
        :desc "Open Agenda" "a" #'(lambda () (interactive) (find-file "~/org/agenda.org"))
        :desc "Open Todo" "t" #'(lambda () (interactive) (find-file "~/org/todo.org"))
        :desc "Open Notes" "n" #'(lambda () (interactive) (find-file "~/org/notes.org"))
        :desc "Open Journal" "j" #'(lambda () (interactive) (find-file "~/org/journal.org"))
        :desc "Open Config" "c" #'(lambda () (interactive) (find-file "~/.doom.d/config.org"))))

  (map! :map evil-org-mode-map
        :after evil-org
        :n "g <up>" #'org-backward-heading-same-level
        :n "g <down>" #'org-forward-heading-same-level
        :n "g <left>" #'org-up-element
        :n "g <right>" #'org-down-element)

  (define-key org-mode-map (kbd "C-c h") 'org-recent-headings)
#+end_src
*** Latex Export
Using [[https://orgmode.org/worg/exporters/ox-overview.html][Ox-latex]] export framework to export from org to latex to pdf
#+begin_src emacs-lisp
  (load-file (concat doom-private-dir "/lisp/ox-latex.el"))
#+end_src
*** Org Keywords
#+begin_src emacs-lisp
  ;; Org Keywords
  (setq org-todo-keywords
        '((sequence
          "TODO(t)"  ; A task that needs doing & is ready to do
          "PROJ(p)"  ; A project, which usually contains other tasks
          "LOOP(r)"  ; A recurring task
          "STRT(s)"  ; A task that is in progress
          "WAIT(w)"  ; Something external is holding up this task
          "HOLD(h)"  ; This task is paused/on hold because of me
          "IDEA(i)"  ; An unconfirmed and unapproved task or notion
          "GYM(g)"  ; Set a Gym Task
          "DATE(D)"  ; Set a Date
          "NEXT(n)"  ; Task successfully completed
          "GOAL(G)"  ; Task successfully completed
          "|"
          "DONE(d)"  ; Task successfully completed
          "CANCELLED(c)"  ; Task successfully completed
          "KILL(k)") ; Task was cancelled, aborted or is no longer applicable
          (sequence
          "[ ](T)"   ; A task that needs doing
          "[-](S)"   ; Task is in progress
          "[?](W)"   ; Task is being held up or paused
          "|"
          "[X](X)")  ; Task was completed
          (sequence
          "|"
          "OKAY(o)"
          "YES(Y)"
          "NO(N)")))
#+end_src
*** Org Roam
I use org-roam to manage my org files and organize my life.
#+begin_src emacs-lisp
(load-file (concat doom-private-dir "/lisp/roam.el"))
#+end_src
*** Org Pretty Table
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.doom.d/lisp/org-pretty-table")
  (require 'org-pretty-table)
  (add-hook 'org-mode-hook #'(lambda () (org-pretty-table-mode)))
#+end_src
*** Org Appear
#+begin_src emacs-lisp
  (progn
  (add-to-list 'load-path "~/.doom.d/lisp/org-appear")
  (require 'org-appear)
  (add-hook 'org-mode-hook #'(lambda () (org-appear-mode)))
  (setq org-appear-autoemphasis t
      org-appear-autosubmarkers t
      org-appear-autolinks nil))
#+end_src
*** Org Beautify
Using =org-modern= because its very modern, a good replacement to =org-superstar=.
#+begin_src emacs-lisp
  (load-file (concat doom-private-dir "/lisp/modern.el"))
  ;; (load-file (concat doom-private-dir "/lisp/superstar.el"))
  ;; (load-file (concat doom-private-dir "/lisp/prettify_symb.el"))
#+end_src
We cannot forgot about tags either and for that matter without using =org-pretty-tags= because its makes tags better.
#+begin_src emacs-lisp
  (load-file (concat doom-private-dir "/lisp/symbols.el"))
#+end_src
*** Org Templates
Adding a bunch of templates to make it easier instead of typing manually.
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src
*** Zen Write
Customized =Zen-Mode= Aka =Write-Room= to be more precise and better focused when writing code and documents.
#+begin_src emacs-lisp
  (load-file (concat doom-private-dir "/lisp/zen_write.el"))
#+end_src
*** Org Header
Beautifying Headers And Enabling Org-Pretty-Mode With Custom Faces
#+begin_src emacs-lisp
  (load-file (concat doom-private-dir "/lisp/org-headder.el"))
#+end_src
*** Org Recent Heading
Using [[https://github.com/alphapapa/org-recent-headings][Org-Recent-Headings]] To Navigate Quickly between previously viewed headings.
#+begin_src emacs-lisp
  (use-package! org-recent-headings
    :config (org-recent-headings-mode)
    (setq org-recent-headings-save-file (concat doom-private-dir "/.cache/org-recent-headings"))))
#+end_src
*** Mixed pitch
#+begin_quote
From the =:ui zen= module.
#+end_quote


We'd like to use mixed pitch in certain modes. If we simply add a hook, when
directly opening a file with (a new) Emacs =mixed-pitch-mode= runs before UI
initialisation, which is problematic. To resolve this, we create a hook that
runs after UI initialisation and both
+ conditionally enables =mixed-pitch-mode=
+ sets up the mixed pitch hooks
- Currently disabled, I usually turn it off (but i'm lazy to do it everytime)
So i just disabled the hook to initiate it everytime.

#+begin_src emacs-lisp :tangle no
(defvar mixed-pitch-modes '(org-mode LaTeX-mode markdown-mode gfm-mode Info-mode)
  "Modes that `mixed-pitch-mode' should be enabled in, but only after UI initialisation.")
(defun init-mixed-pitch-h ()
  "Hook `mixed-pitch-mode' into each mode in `mixed-pitch-modes'.
Also immediately enables `mixed-pitch-modes' if currently in one of the modes."
  (when (memq major-mode mixed-pitch-modes)
    (mixed-pitch-mode 1))
  (dolist (hook mixed-pitch-modes)
    (add-hook (intern (concat (symbol-name hook) "-hook")) #'mixed-pitch-mode)))
(add-hook 'doom-init-ui-hook #'init-mixed-pitch-h)
#+end_src

As mixed pitch uses the variable =mixed-pitch-face=, we can create a new function
to apply mixed pitch with a serif face instead of the default. This was created
for writeroom mode.

#+begin_src emacs-lisp
(autoload #'mixed-pitch-serif-mode "mixed-pitch"
  "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch." t)

(after! mixed-pitch
  (defface variable-pitch-serif
    '((t (:family "serif")))
    "A variable-pitch face with serifs."
    :group 'basic-faces)
  (setq mixed-pitch-set-height t)
  (setq variable-pitch-serif-font (font-spec :family "Alegreya" :size 16))
  (set-face-attribute 'variable-pitch-serif nil :font variable-pitch-serif-font)
  (defun mixed-pitch-serif-mode (&optional arg)
    "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch."
    (interactive)
    (let ((mixed-pitch-face 'variable-pitch-serif))
      (mixed-pitch-mode (or arg 'toggle)))))
#+end_src

Now, as Harfbuzz is currently used in Emacs, we'll be missing out on the
following Alegreya ligatures:
#+begin_center
ff /ff/ ffi /ffi/ ffj /ffj/ ffl /ffl/
fft /fft/ fi /fi/ fj /fj/ ft /ft/
Th /Th/
#+end_center

Thankfully, it isn't to hard to add these to the ~composition-function-table~.
#+begin_src emacs-lisp
(set-char-table-range composition-function-table ?f '(["\\(?:ff?[fijlt]\\)" 0 font-shape-gstring]))
(set-char-table-range composition-function-table ?T '(["\\(?:Th\\)" 0 font-shape-gstring]))
#+end_src
*** Ispell
#+begin_src emacs-lisp
(setq ispell-dictionary "en_US"
      ispell-local-dictionary "en_US"
      ispell-local-dictionary-alist
      '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8))
      company-ispell-dictionary (concat doom-private-dir "misc/english-words.txt")
      ispell-alternate-dictionary (concat doom-private-dir "misc/english-words.txt"))
;; Disabling Company-ispell because auto-complete is better
(setq company-ispell-available nil)
#+end_src
** Large Files
Using vlf to edit large files in chunks
#+begin_src emacs-lisp
(use-package! vlf-setup
  :defer-incrementally vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf)
#+end_src
** Mail In Emacs
*** Mu4e
There's variety of Mail client in Emacs such as the builtin one, however i'd prefer to use something better like mu4e, there's others like notmuch which is also cool
#  LocalWords:  mu4e
#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
(with-eval-after-load 'mu4e
  (setq mu4e-context-policy 'ask-if-none
        mu4e-compose-context-policy 'ask)
  (setq mu4e-change-filenames-when-moving t)
  ;; refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-mu-binary "/usr/bin/mu")
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-root-maildir "~/Mail")
  (setq mu4e-user-agent-string "The God Above All In Undefined Space And Time")
  (setq mail-specify-envelope-from t)
  (setq message-sendmail-envelope-from 'header)
  (setq mail-envelope-from 'header)
  ;; Set Sendmail to msmtp for different accounts
  (setq sendmail-program (executable-find "msmtp"))
  (setq send-mail-function #'sendmail-send-it)
  ;; Set Attachment Directory
  (setq mu4e-attachment-dir "~/Downloads/")

  (setq +mu4e-gmail-accounts '((,my_email . "/Gmail")
                             (,my_email2 . "/Gmail2")))

  (set-email-account! "Personal"
                      `((mu4e-sent-folder          . "/Gmail/sent")
                        (mu4e-drafts-folder        . "/Gmail/drafts")
                        (mu4e-refile-folder        . "/Gmail/[Gmail]/All Mail")
                        (mu4e-trash-folder         . "/Gmail/trash")
                        (user-mail-address         . ,my_email)
                        (mail-host-address         . ,my_hosts)
                        (user-full-name            . ,my_name)
                        (mu4e-compose-signature    . ,my_signature)
                        (smtpmail-smtp-user        . ,my_email)
                        (smtpmail-smtp-server      . "smtp.gmail.com")
                        (smtpmail-stream-type      . ssl)
                        (smtpmail-smtp-service     . 465))
                      t)

  (set-email-account! "Secondary"
                      `((mu4e-sent-folder          . "/Gmail2/sent")
                        (mu4e-drafts-folder        . "/Gmail2/drafts")
                        (mu4e-refile-folder        . "/Gmail2/[Gmail]/All Mail")
                        (mu4e-trash-folder         . "/Gmail2/trash")
                        (user-mail-address         . ,my_email2)
                        (mail-host-address         . ,my_hosts2)
                        (user-full-name            . ,my_name2)
                        (mu4e-compose-signature    . ,my_signature2)
                        (smtpmail-smtp-user        . ,my_email2)
                        (smtpmail-smtp-server      . "smtp.gmail.com")
                        (smtpmail-stream-type      . ssl)
                        (smtpmail-smtp-service     . 465))
                      t)

  ;; adjust the email adresses and account descriptions
  (defun timu/set-msmtp-account ()
    (if (message-mail-p)
        (save-excursion
          (let*
              ((from (save-restriction
                      (message-narrow-to-headers)
                      (message-fetch-field "from")))
              (account
                (cond
                ((string-match ,my_email from) "Gmail")
                ((string-match ,my_email2 from) "Gmail2"))))
            (setq message-sendmail-extra-arguments (list '"-a" account))))))

  (add-hook 'message-send-mail-hook 'timu/set-msmtp-account)

  (mu4e-bookmark-define "maildir:/Gmail/Inbox" "Inbox - Personal" ?i)
  (mu4e-bookmark-define "maildir:/Gmail2/Inbox" "Inbox - Secondary" ?g))

  ;; (setq mu4e-maildir-shortcuts
  ;;       '(("/Inbox"    . ?i)
  ;;         ("sent"      . ?s)
  ;;         ("trash"     . ?t)
  ;;         ("drafts"    . ?d)
  ;;         ("/[Gmail]/All Mail"  . ?a))))
#+end_src

#+RESULTS:

~NOTICE:~ Since I'm using experimental mu4e __1.7.0__ Remove ~add-to-list ...~ this will load installed mu and mu4e stable __1.6*__
*** Mu4e-alert
Since I'm using Mu4e 1.7.0 which is unstable , obviously there's fewer bugs and this one is related mu4e-alert.
This piece of configuration is totally not needed in Doom Emacs Since it's already there if you enable it .
#+begin_src emacs-lisp :tangle no
(use-package! mu4e-alert
  :after mu4e
  :config
  (setq doom-modeline-mu4e t)

  (mu4e-alert-enable-mode-line-display)
  (mu4e-alert-enable-notifications)

  (mu4e-alert-set-default-style 'libnotify)
  (map! :leader
        (:prefix-map ("d". "Doom")
         :desc "Disable Mu4e Modeline Alert" "n" #'mu4e-alert-disable-mode-line-display
         :desc "Enable Mu4e Modeline Alert" "i" #'mu4e-alert-enable-mode-line-display))

  (defvar +mu4e-alert-bell-cmd '("paplay" . "/usr/share/sounds/freedesktop/stereo/message.oga")
    "Cons list with command to play a sound, and the sound file to play.
                 Disabled when set to nil.")

  (setq mu4e-alert-email-notification-types '(subjects))
  (defun +mu4e-alert-grouped-mail-notification-formatter-with-bell (mail-group _all-mails)
    "Default function to format MAIL-GROUP for notification.
                 ALL-MAILS are the all the unread emails"
    (when +mu4e-alert-bell-cmd
      (start-process (car +mu4e-alert-bell-cmd) (cdr +mu4e-alert-bell-cmd)))
    (if (> (length mail-group) 1)
        (let* ((mail-count (length mail-group))
               (first-mail (car mail-group))
               (title-prefix (format "You have %d unread emails"
                                     mail-count))
               (field-value (mu4e-alert--get-group first-mail))
               (title-suffix (format (pcase mu4e-alert-group-by
                                       (`:from "from %s:")
                                       (`:to "to %s:")
                                       (`:maildir "in %s:")
                                       (`:priority "with %s priority:")
                                       (`:flags "with %s flags:"))
                                     field-value))
               (title (format "%s %s" title-prefix title-suffix)))
          (list :title title
                :body (s-join "\n"
                              (mapcar (lambda (mail)
                                        (format "%s<b>%s</b> • %s"
                                                (cond
                                                 ((plist-get mail :in-reply-to) "⮩ ")
                                                 ((string-match-p "\\`Fwd:"
                                                                  (plist-get mail :subject)) " ⮯ ")
                                                 (t "  "))
                                                (truncate-string-to-width (caar (plist-get mail :from))
                                                                          20 nil nil t)
                                                (truncate-string-to-width
                                                 (replace-regexp-in-string "\\`Re: \\|\\`Fwd: " ""
                                                                           (plist-get mail :subject))
                                                 40 nil nil t)))
                                      mail-group))))
      (let* ((new-mail (car mail-group))
             (subject (plist-get new-mail :subject))
             (sender (caar (plist-get new-mail :from))))
        (list :title sender :body subject))))
  (setq mu4e-alert-grouped-mail-notification-formatter #'+mu4e-alert-grouped-mail-notification-formatter-with-bell))
#+end_src
*** Org Mime
org-mime is another cool packages , that allows us to turn org syntax into html when composing mail, since few mail providers do not supports plain-text SMH
#+begin_src emacs-lisp
;;(use-package! org-mime
;;  :ensure t
;;  :config
;;  (setq org-mime-export-options '(:section-numbers nil
;;                                  :with-author nil
;;                                  :with-toc nil))
;;  (add-hook 'org-mime-html-hook
;;            (lambda ()
;;              (org-mime-change-element-style
;;               "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
;;                             "#E6E1DC" "#232323"))))
;;  (add-hook 'message-send-hook 'org-mime-htmlize))
#+end_src
** Neotree
#+begin_src emacs-lisp
(use-package! "neotree"
  :bind(("C-c C-f" . neotree-toggle))
  :config
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+end_src
** Vterm
#+begin_src emacs-lisp
(with-eval-after-load 'vterm
  (define-key vterm-mode-map (kbd "<C-left>") 'vterm-send-M-b)
  (define-key vterm-mode-map (kbd "<C-right>") 'vterm-send-M-e)
  (define-key vterm-mode-map (kbd "<C-backspace>")
    #'(lambda () (interactive) (vterm-send-key (kbd "C-w")))))
#+end_src
** Screenshot And Screencast
*** Screenshot
Using this awesome package called [[https://github.com/tecosaur/screenshot][Screenshot]] take takes cool screenshots like this one.
[[file:img/screenshot.png]]
#+begin_src emacs-lisp
(progn
  (add-to-list 'load-path "~/.doom.d/lisp/screenshot")
  (require 'screenshot)
  (setq screenshot-upload-fn "~/.local/bin/0x0 %s 2>/dev/null")
  (setq screenshot-font-size 10)
  (setq screenshot-font-family "VictorMono Nerd Font")
  (setq screenshot-shadow-color "#cd7054")
  (setq screenshot-shadow-offset-horizontal -10)
  (setq screenshot-shadow-offset-vertical 10))
#+end_src
*** Screencast
For capturing emacs frames i use gif-screencast which does the job.
#+begin_src emacs-lisp
;; (use-package! gif-screencast
;;   :commands gif-screencast-mode
;;   :config
;;   (map! :map gif-screencast-mode-map
;;         :g "<f8>" #'gif-screencast-toggle-pause
;;         :g "<f9>" #'gif-screencast-stop)
;;   (setq gif-screencast-program "maim"
;;         gif-screencast-args `("--quality" "3" "-i" ,(string-trim-right
;;                                                      (shell-command-to-string
;;                                                       "xdotool getactivewindow")))
;;         gif-screencast-optimize-args '("--batch" "--optimize=3" "--usecolormap=/tmp/doom-color-theme"))
;;   (defun gif-screencast-write-colormap ()
;;     (f-write-text
;;      (replace-regexp-in-string
;;       "\n+" "\n"
;;       (mapconcat (lambda (c) (if (listp (cdr c))
;;                                  (cadr c))) doom-themes--colors "\n"))
;;      'utf-8
;;      "/tmp/doom-color-theme" ))
;;   (gif-screencast-write-colormap)
;;   (add-hook 'doom-load-theme-hook #'gif-screencast-write-colormap))
#+end_src
** Hammy
Hammy interactive interval timers, used for setting up timers and resting periods.
#+begin_src emacs-lisp
(use-package! hammy
  :config
  (hammy-mode)
  (hammy-define (propertize "🍅" 'face '(:foreground "tomato"))
    :documentation "The classic pomodoro timer."
    :intervals
    (list
    (interval :name "Work"
              :duration "35 minutes"
              :before (do (announce "Starting work time.")
                          (notify "Starting work time."))
              :advance (do (announce "Break time!")
                            (notify "Break time!")))
    (interval :name "Break"
              :duration (do (if (and (not (zerop cycles))
                                      (zerop (mod cycles 3)))
                                ;; If a multiple of three cycles have
                                ;; elapsed, the fourth work period was
                                ;; just completed, so take a longer break.
                                "30 minutes"
                              "5 minutes"))
              :before (do (announce "Starting break time.")
                          (notify "Starting break time."))
              :advance (do (announce "Break time is over!")
                            (notify "Break time is over!"))))))
#+end_src
** Twitter-Mode
Twittering-Mode , To View status and stuff
#+begin_src emacs-lisp
(with-eval-after-load 'twittering-mode
  (setq twittering-allow-insecure-server-cert t)
  (setq twittering-use-master-password t)
  (defun *twittering-generate-format-table (status-sym prefix-sym)
    `(("%" . "%")
      ("}" . "}")
      ("#" . (cdr (assq 'id ,status-sym)))
      ("'" . (when (cdr (assq 'truncated ,status-sym))
               "..."))
      ("c" .
       (let ((system-time-locale "C"))
         (format-time-string "%a %b %d %H:%M:%S %z %Y"
                             (cdr (assq 'created-at ,status-sym)))))
      ("d" . (cdr (assq 'user-description ,status-sym)))
      ("f" .
       (twittering-make-string-with-source-property
        (cdr (assq 'source ,status-sym)) ,status-sym))
      ("i" .
       (when (and twittering-icon-mode window-system)
         (let ((url
                (cond
                 ((and twittering-use-profile-image-api
                       (eq twittering-service-method 'twitter)
                       (or (null twittering-convert-fix-size)
                           (member twittering-convert-fix-size '(48 73))))
                  (let ((user (cdr (assq 'user-screen-name ,status-sym)))
                        (size
                         (if (or (null twittering-convert-fix-size)
                                 (= 48 twittering-convert-fix-size))
                             "normal"
                           "bigger")))
                    (format "http://%s/%s/%s.xml?size=%s" twittering-api-host
                            (twittering-api-path "users/profile_image") user size)))
                 (t
                  (cdr (assq 'user-profile-image-url ,status-sym))))))
           (twittering-make-icon-string nil nil url))))
      ("I" .
       (let* ((entities (cdr (assq 'entity ,status-sym)))
              text)
         (mapc (lambda (url-info)
                 (setq text (or (cdr (assq 'media-url url-info)) "")))
               (cdr (assq 'media entities)))
         (if (string-equal "" text)
             text
           (let ((twittering-convert-fix-size 360))
             (twittering-make-icon-string nil nil text)))))
      ("j" . (cdr (assq 'user-id ,status-sym)))
      ("L" .
       (let ((location (or (cdr (assq 'user-location ,status-sym)) "")))
         (unless (string= "" location)
           (concat " [" location "]"))))
      ("l" . (cdr (assq 'user-location ,status-sym)))
      ("p" . (when (cdr (assq 'user-protected ,status-sym))
               "[x]"))
      ("r" .
       (let ((reply-id (or (cdr (assq 'in-reply-to-status-id ,status-sym)) ""))
             (reply-name (or (cdr (assq 'in-reply-to-screen-name ,status-sym))
                             ""))
             (recipient-screen-name
              (cdr (assq 'recipient-screen-name ,status-sym))))
         (let* ((pair
                 (cond
                  (recipient-screen-name
                   (cons (format "sent to %s" recipient-screen-name)
                         (twittering-get-status-url recipient-screen-name)))
                  ((and (not (string= "" reply-id))
                        (not (string= "" reply-name)))
                   (cons (format "in reply to %s" reply-name)
                         (twittering-get-status-url reply-name reply-id)))
                  (t nil)))
                (str (car pair))
                (url (cdr pair))
                (properties
                 (list 'mouse-face 'highlight 'face 'twittering-uri-face
                       'keymap twittering-mode-on-uri-map
                       'uri url
                       'front-sticky nil
                       'rear-nonsticky t)))
           (when (and str url)
             (concat " " (apply 'propertize str properties))))))
      ("R" .
       (let ((retweeted-by
              (or (cdr (assq 'retweeting-user-screen-name ,status-sym)) "")))
         (unless (string= "" retweeted-by)
           (concat " (retweeted by " retweeted-by ")"))))
      ("S" .
       (twittering-make-string-with-user-name-property
        (cdr (assq 'user-name ,status-sym)) ,status-sym))
      ("s" .
       (twittering-make-string-with-user-name-property
        (cdr (assq 'user-screen-name ,status-sym)) ,status-sym))
      ("U" .
       (twittering-make-fontified-tweet-unwound ,status-sym))
      ;; ("D" .
      ;;  (twittering-make-fontified-tweet-unwound ,status-sym))
      ("T" .
       ,(twittering-make-fontified-tweet-text
         `(twittering-make-fontified-tweet-text-with-entity ,status-sym)
         twittering-regexp-hash twittering-regexp-atmark))
      ("t" .
       ,(twittering-make-fontified-tweet-text
         `(twittering-make-fontified-tweet-text-with-entity ,status-sym)
         twittering-regexp-hash twittering-regexp-atmark))
      ("u" . (cdr (assq 'user-url ,status-sym)))))
  (advice-add #'twittering-generate-format-table :override #'*twittering-generate-format-table)
  (defface twitter-divider
    `((t (:underline (:color "grey"))))
    "The vertical divider between tweets."
    :group 'twittering-mode)
  (setq twittering-icon-mode t
        twittering-use-icon-storage t
        twittering-convert-fix-size 40
        twittering-status-format "
  %i  %FACE[font-lock-function-name-face]{  @%s}  %FACE[italic]{%@}  %FACE[error]{%FIELD-IF-NONZERO[❤ %d]{favorite_count}}  %FACE[warning]{%FIELD-IF-NONZERO[↺ %d]{retweet_count}}

%FOLD[   ]{%FILL{%t}
%QT{
%FOLD[   ]{%FACE[font-lock-function-name-face]{@%s}\t%FACE[shadow]{%@}
%FOLD[ ]{%FILL{%t}}
}}}

    %I

%FACE[twitter-divider]{                                                                                                                                                                                  }
"))
#+end_src
** Fun Packages
*** Emoji
Switched From =Twitter Emoji= to =Open Emoji= because it looks better.
#+begin_src emacs-lisp
(setq emojify-emoji-set "openmoji-v13-0")
(global-emojify-mode-line-mode)
#+end_src

One minor annoyance is the use of emojis over the default character
when the default is actually preferred. This occurs with overlay symbols I use
in Org mode, such as checkbox state, and a few other miscellaneous cases.

We can accommodate our preferences by deleting those entries from the emoji hash
table

#+begin_src emacs-lisp
(defvar emojify-disabled-emojis
  '(;; Org
    "◼" "☑" "☸" "⚙" "⏩" "⏪" "⬆" "⬇" "❓"
    ;; Terminal powerline
    "✔"
    ;; Box drawing
    "▶" "◀")
  "Characters that should never be affected by `emojify-mode'.")

(defadvice! emojify-delete-from-data ()
  "Ensure `emojify-disabled-emojis' don't appear in `emojify-emojis'."
  :after #'emojify-set-emoji-data
  (dolist (emoji emojify-disabled-emojis)
    (remhash emoji emojify-emojis)))
#+end_src

Now, it would be good to have a minor mode which allowed you to type ascii/gh
emojis and get them converted to unicode. Let's make one.
#+begin_src emacs-lisp
(defun emojify--replace-text-with-emoji (orig-fn emoji text buffer start end &optional target)
  "Modify `emojify--propertize-text-for-emoji' to replace ascii/github emoticons with unicode emojis, on the fly."
  (if (or (not emoticon-to-emoji) (= 1 (length text)))
      (funcall orig-fn emoji text buffer start end target)
    (delete-region start end)
    (insert (ht-get emoji "unicode"))))

(define-minor-mode emoticon-to-emoji
  "Write ascii/gh emojis, and have them converted to unicode live."
  :global nil
  :init-value nil
  (if emoticon-to-emoji
      (progn
        (setq-local emojify-emoji-styles '(ascii github unicode))
        (advice-add 'emojify--propertize-text-for-emoji :around #'emojify--replace-text-with-emoji)
        (unless emojify-mode
          (emojify-turn-on-emojify-mode)))
    (setq-local emojify-emoji-styles (default-value 'emojify-emoji-styles))
    (advice-remove 'emojify--propertize-text-for-emoji #'emojify--replace-text-with-emoji)))
#+end_src

This new minor mode of ours will be nice for messages, so let's hook it in for
Email and IRC.
#+begin_src emacs-lisp
(add-hook! '(mu4e-compose-mode org-msg-edit-mode circe-channel-mode) (emoticon-to-emoji 1))
#+end_src
*** Rainbow Mode
Display hex colors
#+begin_src emacs-lisp
(use-package! rainbow-mode
  :init
  (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src
*** 0x0
0x0 is a cool package to upload code snippets to 0x0.st
#+begin_src emacs-lisp
(require '0x0)
(map! :leader
      (:prefix-map ("d" . "Doom")
       (:prefix ("x" . "0x0")
        :desc "Yank Buffer/Region To 0x0" "1" #'0x0-upload-text
        :desc "Upload File To 0x0" "0" #'0x0-upload-file)))
#+end_src
*** Mpd
Mpdmacs is a cool wrapper around mpd for emacs to control mpd and display the current,
playing song on the modeline
#+begin_src emacs-lisp
(require 'mpdmacs)
(setq mpdmacs-host "192.168.1.110")
;;(mpdmacs-mode)
#+end_src
*** Elcord
A Lot of us Emacs users love to show the world we are using emacs thats where elcord comes in,
Share what file u editing right now on discord, what u doing what buffer ...
#+begin_src emacs-lisp
(use-package! elcord
  :commands elcord-mode
  :config
  (setq elcord--editor-name "Emacs")
  (setq elcord-editor-icon "emacs_legacy_icon")
  (setq elcord-use-major-mode-as-main-icon t))
#+end_src
*** Nyan Mode
The Dancing Rainbow Cat
#+begin_src emacs-lisp
(require 'nyan-mode)
#+end_src
*** Smudge
Using Smudge To Control Spotify
#+begin_src emacs-lisp
(load-file (concat doom-private-dir "/lisp/smudge/smudge.el"))
(with-eval-after-load 'smudge
  (setq smudge-oauth2-client-secret "---SECRET-------"
        smudge-oauth2-client-id "---CLIENT_ID-------"
        smudge-player-status-format "%a - %t ◷ %l "
        smudge-player-status-truncate-length 40)
  (define-key smudge-mode-map (kbd "C-c o") 'smudge-command-map))
  ;; (global-smudge-remote-mode))
#+end_src
*** Goggles
Goggles highlights the modified region, Supported commands (undo, yank, kill and delete)
#+begin_src emacs-lisp
(use-package! goggles
  :hook ((prog-mode text-mode) . goggles-mode)
  :config
  (setq-default goggles-pulse t)) ;; set to nil to disable pulsing
#+end_src
*** Mpris
Controlling Mpris And Adding Song Metadata Into Modeline
#+begin_src emacs-lisp
(load-file (concat doom-private-dir "/lisp/mpris-control.el"))
(mpris-control-info-mode)
#+end_src
*** Gptel
Attempting to use chatGPT in Emacs.
#+begin_src emacs-lisp
(setq gptel-model "gpt-4")
#+end_src
** Scimax Bookmard
scimax-bookmarks from [[https://github.com/jkitchin/scimax][Scimax]] is a cool snippet, that highlights a specific word/sentence also does other cool things.
#+begin_src emacs-lisp
;; (load-file (concat doom-private-dir "/lisp/scimax-editmarks.el"))
;;(org-babel-load-file "~/.doom.d/lisp/scimax-editmarks.org")
#+end_src
