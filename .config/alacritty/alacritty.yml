# Configuration for Alacritty, the GPU enhanced terminal emulator.
env:
  TERM: xterm-256color
  MANPAGER: /bin/sh -c \"col -b | vim --not-a-term -c 'set ft=man ts=8 nomod nolist noma' -\"
  EDITOR: nvim

window:
  padding:
    x: 4
    y: 4
  decoration: full
  title: Alacritty
  class:
    instance: Alacritty
    general: Alacritty
  #gtk_theme_variant: None

scrolling:
  history: 5000
  #multiplier: 3
  #auto_scroll: false

#tabspaces: 8

font:
  normal:
    family: Mononoki Nerd Font
    style: Regular
  bold:
    family: Mononoki Nerd Font
    style: Bold
  italic:
    family: Mononoki Nerd Font
    style: Italic

  bold_italic:
    family: Mononoki Nerd Font
    style: Bold Italic
  size: 9.0
  offset:
    x: 0
    y: 0
  #glyph_offset:
  #  x: 0
  #  y: 0

draw_bold_text_with_bright_colors: true

colors:
  primary:
    background: '0x0e1019'
    foreground: '0xfffaf4'
    #dim_foreground: '0x9a9a9a'
    #bright_foreground: '0xffffff'

  cursor:
    #text: '0x000000'
    cursor: '0xBBF0FF'

  # Selection colors
  #
  # Colors which should be used to draw the selection area. If selection
  # background is unset, selection color will be the inverse of the cell colors.
  # If only text is unset the cell text color will remain the same.
  # selection:
  #   text: '0xbbc2cf'
  #   background: '0x282c34'

  # Normal colors
  normal:
    black:   '0x232323'
    red:     '0xff000f'
    green:   '0x8ce10b'
    yellow:  '0xffb900'
    blue:    '0x008df8'
    magenta: '0x6d43a6'
    cyan:    '0x00d8eb'
    white:   '0xffffff'
  # Bright colors
  bright:
    black:   '0x444444'
    red:     '0xff2740'
    green:   '0xabe15b'
    yellow:  '0xffd242'
    blue:    '0x0092ff'
    magenta: '0x9a5feb'
    cyan:    '0x67fff0'
    white:   '0xffffff'

  #dim:
  #  black:   '0x000000'
  #  red:     '0x8c3336'
  #  green:   '0x7a8530'
  #  yellow:  '0x97822e'
  #  blue:    '0x506d8f'
  #  magenta: '0x80638e'
  #  cyan:    '0x497e7a'
  #  white:   '0x9a9a9a'


# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear

#visual_bell:
#  animation: EaseOutExpo
#  duration: 0
#  color: '0xffffff'

background_opacity: 1

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"
  save_to_clipboard: true

# dynamic_title: true

#cursor:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  # style: Block
  #unfocused_hollow: true

#live_config_reload: true
#shell:
#  program: /bin/bash
#  args:
#    - --login

# working_directory: ~/
#winpty_backend: false
#alt_send_esc: true
#debug:
  #render_timer: false
  #persistent_logging: false
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn
  #print_events: false
  #ref_test: false

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  #double_click: { threshold: 300 }
  #triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

  #url:
    #launcher:
    #  program: xdg-open
    #  args: []
    #modifiers: None

# - `mouse`:
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
# - `action` (see key bindings)
# - `mods` (see key bindings)

mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
key_bindings:
  - { key: V,         mods: Alt,       action: Paste            }
  - { key: C,         mods: Alt,       action: Copy             }
  - { key: Insert,    mods: Shift,     action: PasteSelection   }
  - { key: Key1,      mods: Alt,       action: ResetFontSize    }
  - { key: Up,        mods: Alt|Shift, action: IncreaseFontSize }
  - { key: K,         mods: Alt|Shift, action: IncreaseFontSize }
  - { key: Down,      mods: Alt|Shift, action: DecreaseFontSize }
  - { key: J,         mods: Alt|Shift, action: DecreaseFontSize }

  - { key: Paste,                    action: Paste                            }
  - { key: Copy,                     action: Copy                             }
  - { key: L,         mods: Control, action: ClearLogNotice                   }
  - { key: L,         mods: Control, chars: "\x0c"                            }
  - { key: PageUp,    mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }
  - { key: PageDown,  mods: Shift,   action: ScrollPageDown, mode: ~Alt       }
  - { key: Home,      mods: Shift,   action: ScrollToTop,    mode: ~Alt       }
  - { key: End,       mods: Shift,   action: ScrollToBottom, mode: ~Alt       }
