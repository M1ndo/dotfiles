#!/usr/bin/env bash

# A script that interacts with eww widget (player-side) to get information about (spotify|ncspot/Mpris|mpd)
# Written By ybenel (github.com/m1ndo)

# Get Current Running Player.
players=("spotify" "parole" "ncspot")
for player in "${players[@]}"; do
    if ps -C $player > /dev/null; then
        status=$(eval "playerctl -p \$player status")
        if [ "$status" = "Playing" ] || [ "$status" = "Paused" ]; then
            PLAYER=$player
        fi
    fi
done
if ps -C mpd > /dev/null; then
    status=$(mpc status | grep playing > /dev/null)
    exit_code=$?
    if [ $exit_code -eq 0 ]; then
        if [ -z $PLAYER ]; then
            PLAYER="mpd"
        fi
    fi
    status=$(mpc status | grep paused > /dev/null)
    exit_code=$?
    if [ $exit_code -eq 0 ]; then
        if [ -z $PLAYER ]; then
            PLAYER="mpd"
        fi
    fi
fi
if [ -z $PLAYER ]; then
   status=$(playerctl status)
   if [ "$status" = "Playing" ] || [ "$status" = "Paused" ]; then
       PLAYER="Unknown"
   fi
fi
get_title() {
    if  [[ "${players[@]}" =~ "$PLAYER" ]]; then
        TITLE=$(eval playerctl -p \$PLAYER metadata --format '{{title}}')
        echo $TITLE
    elif [ "$PLAYER" = "mpd" ]; then
        TITLE=$(mpc -f %title% current)
        echo $TITLE
    elif [ "$PLAYER" = "Unknown" ]; then
        TITLE=$(playerctl metadata -f '{{title}}')
        echo $TITLE
    else
        echo "Offline"
    fi
}

get_album() {
    if  [[ "${players[@]}" =~ "$PLAYER" ]]; then
        ALBUM=$(eval playerctl -p \$PLAYER metadata --format '{{album}}')
        echo $ALBUM
    elif [ "$PLAYER" = "mpd" ]; then
        ALBUM=$(mpc -f %album% current)
        echo $ALBUM
    elif [ "$PLAYER" = "Unknown" ]; then
        ALBUM=$(playerctl metadata -f '{{album}}')
        echo $ALBUM
    else
        echo "Offline"
    fi
}
get_artist() {
    if  [[ "${players[@]}" =~ "$PLAYER" ]]; then
        ARTIST=$(eval playerctl -p \$PLAYER metadata --format '{{artist}}')
        echo $ARTIST
    elif [ "$PLAYER" = "mpd" ]; then
        ARTIST=$(mpc -f %artist% current)
        echo $ARTIST
    elif [ "$PLAYER" = "Unknown" ]; then
        ARTIST=$(playerctl metadata -f '{{artist}}')
        echo $ARTIST
    else
        echo "Player"
    fi
}
get_status() {
    if  [[ "${players[@]}" =~ "$PLAYER" ]]; then
        STATUS=$(eval playerctl -p \$PLAYER status)
        if [ "$STATUS" = "Playing" ]; then
            STATUS=""
        else
            STATUS=""
        fi
        printf "$STATUS"
    elif [ "$PLAYER" = "mpd" ]; then
        STATUS=$(mpc status | grep playing > /dev/null)
        exit_code=$?
        if [ $exit_code -eq 0 ]; then
            STATUS=""
        else
            STATUS=""
        fi
        printf "$STATUS"
    else
        printf ""
    fi
}
get_statuss() {
    if  [[ "${players[@]}" =~ "$PLAYER" ]]; then
        STATUS=$(eval playerctl -p \$PLAYER status)
        if [ "$STATUS" = "Playing" ]; then
            STATUS="Playing"
        else
            STATUS="Paused"
        fi
        printf "$STATUS"
    elif [ "$PLAYER" = "mpd" ]; then
        STATUS=$(mpc status | grep playing > /dev/null)
        exit_code=$?
        if [ $exit_code -eq 0 ]; then
            STATUS="Playing"
        else
            STATUS="Playing"
        fi
        printf "$STATUS"
    else
        printf "Paused"
    fi
}

cp_ranimg() {
    DIR_IMG="$HOME/.config/eww/imgs/"
    FILE=$(find "$DIR_IMG" -type f | shuf -n 1)
    if [[ "${players[@]}" =~ "$PLAYER" ]]; then
        cp $FILE /tmp/spotify_cover.png
    elif [ "$PLAYER" = "mpd" ]; then
        cp $FILE /tmp/mpd_cover.png
    else
        echo $FILE
    fi
}

get_art() {
    if  [[ "${players[@]}" =~ "$PLAYER"  ]]; then
        if [ $(eval playerctl -p \$PLAYER metadata mpris:artUrl) ]; then
            ARTLINK=$(eval playerctl -p \$PLAYER metadata mpris:artUrl | sed -e 's/open.spotify.com/i.scdn.co/g')
            if [[ "$ARTLINK" =~ "file://" ]]; then
                ARTLINK=$(eval "playerctl -p \$PLAYER metadata -f '{{mpris:artUrl}}' | awk -F:// '{print $2}");
            fi
            if [ ! -f $ARTLINK ]; then
                curl -s $ARTLINK --output "/tmp/spotify_cover.png"
            else
                cp $ARTLINK "/tmp/spotify_cover.png"
            fi
        else
            cp_ranimg
        fi
        echo "/tmp/spotify_cover.png"
    elif [ "$PLAYER" = "mpd" ]; then
        MUSIC_DIR="$HOME/Music"
        FFMPEG=$(ffmpeg -i "${MUSIC_DIR}/$(mpc current -f %file%)" "/tmp/mpd_cover.png" -y &> /dev/null)
        exit_code=$?
        [ "$exit_code" -eq 1 ] && cp_ranimg
        echo "/tmp/mpd_cover.png"
    elif [ "$PLAYER" = "Unknown" ]; then
        file=$(playerctl metadata -f '{{mpris:artUrl}}')
        if [ ! -z $file ]; then
            echo $file
        fi
    else
        cp_ranimg
    fi
}

pause_play() {
    if [[ "${players[@]}" =~ "$PLAYER"  ]]; then
        playerctl -p $PLAYER play-pause
    elif [ "$PLAYER" = "mpd" ]; then
        mpc toggle
    fi
}

play_prev() {
    if [[ "${players[@]}" =~ "$PLAYER"  ]]; then
        playerctl -p $PLAYER previous
    elif [ "$PLAYER" = "mpd" ]; then
        mpc prev
    fi
}

play_next() {
    if [[ "${players[@]}" =~ "$PLAYER"  ]]; then
        playerctl -p $PLAYER next
    elif [ "$PLAYER" = "mpd" ]; then
        mpc next
    fi
}

player_stop() {
    if [[ "${players[@]}" =~ "$PLAYER"  ]]; then
        playerctl -p $PLAYER stop
    elif [ "$PLAYER" = "mpd" ]; then
        mpc stop
    fi
}

show_current() {
    echo "Album        `get_album`"
    echo "AlbumArtist  `get_artist`"
    echo "Artist       `get_artist`"
    echo "Title        `get_title`"
    echo "Status       `get_statuss`"
    echo "Duration     `get_timing`"

}

get_lyrics() {
    file=$(eval find ~/.cache/lyrics/ | grep -i `get_title|tr -d '[:space:]'`)
    if [ ! -z $file ]; then
        cat $file
    else
        echo "No Lyrics Had Been Found 😿"
    fi
}

get_timing() {
   FULL_M=`python -c "print(($(nc -W 1 -U ~/.cache/ncspot/ncspot.sock | jq '.playable.duration')/1000/60) % 60)" | cut -c -4`
   CUR_T=`playerctl position | cut -c -5`
   if [[ `bc -l <<< "$CUR_T > 60"` -eq 1 ]]; then
      CUR_M=`python -c "print($(playerctl position|cut -c -5)/60)" | cut -c -4 | awk -F. -vOFS=':' '{print $1,$2}'`
   else
       CUR_M="0:"`playerctl position | cut -c -2`
   fi
   echo "[$CUR_M/$FULL_M]"
}

get_percentage() {
   FULL_M=`python -c "print(($(nc -W 1 -U ~/.cache/ncspot/ncspot.sock | jq '.playable.duration')/1000/60) % 60)" | cut -c -4`
   CUR_T=`playerctl position | cut -c -5`
   python -c "print(($CUR_T / ($FULL_M * 60)) * 100)" | cut -c -2
}

shortopts="atilsfnpocyhST"
options=$(getopt -o $shortopts --long artist,title,album,art,lyrics,status,fetch,toggle,next,prev,stop,current,time,perc,help -- "$@")
eval set -- "$options"

# Process options
while true; do
    case $1 in
        -a|--art) get_art ;;
        -t|--title) get_title ;;
        -i|--artist) get_artist ;;
        -l|--lyrics) get_lyrics ;;
        -s|--status) get_status ;;
        -f|--fetch) echo "%{F#00ff7f}$(get_title) %{F#7b68ee}- %{F#ffff00}$(get_artist)" ;;
        -n|--next) play_next ;;
        -p|--prev) play_prev ;;
        -S|--stop) player_stop ;;
        -T|--toggle) pause_play ;;
        -c|--current) show_current ;;
        -y|--time) get_timing ;;
        --perc) get_percentage ;;
        -h|--help)
            echo "Usage: $0 [-a|--art] [-t|--title] [-i|--artist] [-l|--lyrics] [-s|--status] [-f|--fetch] [-n|--next] [-p|--prev] [-S|--stop] [-T|--toggle] [-c|--current] [-y|--time] [--perc] [-h|--help]" >&2
            exit 1 ;;
        --) shift; break ;;
        *) echo "Invalid option: $1" >&2
           exit 1 ;;
    esac
    shift
done
